{
  "parsedContent": {
    "content": "# folder-mcp\n\n**Model Context Protocol Server for Folder Operations**\n\nA Model Context Protocol (MCP) server that provides tools for reading and analyzing folder structures, enabling LLMs to interact with local file systems safely and efficiently.\n\n## Overview\nfolder-mcp was created for a simple but powerful purpose: take your local folder and make it accessible to Large Language Models (LLMs) running anywhere.\nYou don't need to upload your files to the cloud or use a third-party service.\n\nit creates RAG (Retrieval-Augmented Generation) capabilities for your local files, allowing LLMs to read, search, and analyze documents in a secure and structured way.\nThis server implements the Model Context Protocol (MCP) standard, allowing LLMs to interact with local file systems through a set of defined tools.\nThis project is designed to work with MCP clients like Claude Desktop, Cursor, VsCode and others, providing a secure and efficient way to access and manipulate files within specified folders.\n\n## Features\n\n‚úÖ **Secure File Access**\n- Read files from specified folders with path validation\n- Security checks to prevent directory traversal attacks\n- Support for various file types and encodings\n\n‚úÖ **File System Operations**\n- List all files in a folder recursively\n- Search files by name patterns (glob support)\n- Get folder information and metadata\n- Exclude common directories like node_modules and .git\n\n‚úÖ **MCP Integration**\n- Standard Model Context Protocol server implementation\n- Works with Claude Desktop and other MCP clients\n- Stdio transport for seamless integration\n- Structured tool definitions with JSON schemas\n\n‚úÖ **Developer Friendly**\n- TypeScript implementation with full type safety\n- Clear error handling and informative responses\n- Simple CLI interface for testing and development\n\n## Installation\n\n```bash\ngit clone https://github.com/okets/folder-mcp.git\ncd folder-mcp\nnpm install\nnpm run build\n```\n\n## Configuration\n\nfolder-mcp uses a centralized configuration system stored in `config.yaml` at the project root. This YAML file contains settings for embeddings, caching, processing, API, logging, and development configurations.\n\n### Embedding Models\n\nThe system supports multiple embedding models with GPU acceleration via Ollama:\n\n| Model | Dimensions | Description |\n|-------|------------|-------------|\n| `nomic-v1.5` | 768 | High-quality general-purpose (default) |\n| `mxbai-large` | 1024 | Large model with excellent performance |\n| `all-minilm` | 384 | Lightweight and fast |\n| `bge-small` | 384 | BAAI general embedding, small version |\n| `gte-base` | 768 | General Text Embeddings model |\n\n### Configuration Structure\n\n```yaml\n# Embedding Model Configuration\nembeddings:\n  defaultModel: \"nomic-v1.5\"\n  ollamaApiUrl: \"http://127.0.0.1:11434\"\n  batchSize: 32\n  timeoutMs: 30000\n  models:\n    # Model definitions with dimensions, descriptions, etc.\n\n# Cache Configuration  \ncache:\n  defaultCacheDir: \"~/.cache/folder-mcp\"\n  maxCacheSize: \"10GB\"\n  cleanupIntervalHours: 24\n\n# Text Processing Configuration\nprocessing:\n  defaultChunkSize: 1000\n  defaultOverlap: 200\n  maxConcurrentOperations: 10\n\n# Development & Logging options\nlogging:\n  level: \"info\"\n  format: \"json\"\n  \ndevelopment:\n  enableDebugOutput: false\n  mockOllamaApi: false\n```\n\nFor detailed configuration options, see [CONFIGURATION.md](docs/CONFIGURATION.md).\n\n## Current Status\n\nüöÄ **Version 1.0** - Basic MCP Server (13/30 planned features complete)\n\nThis is the foundation release providing secure file system access through MCP. The full vision includes semantic search, embeddings, and intelligent document parsing - see [ROADMAP.md](ROADMAP.md) for the complete development plan.\n\n**What works now:**\n- ‚úÖ Basic file reading and folder operations\n- ‚úÖ Security validation and path protection  \n- ‚úÖ Pattern-based file searching\n- ‚úÖ MCP protocol integration\n\n**Coming next:** Smart text chunking, semantic embeddings, vector search ([see all 30 planned features](GITHUB_ISSUES.md))\n\n## Usage\n\n### As an MCP Server\n\nThis server is designed to be used with MCP clients like Claude Desktop. Add it to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"folder-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"C:\\\\Path\\\\To\\\\folder-mcp\\\\dist\\\\mcp-server.js\",\n        \"C:\\\\Path\\\\To\\\\folder-mcp\"\n      ],\n      \"env\": {}\n    }\n  }\n}\n```\n\n> ‚ö†Ô∏è **Critical Claude Desktop Integration Note**: \n> The MCP protocol requires that ONLY valid JSON-RPC messages go to stdout. Any logging or debugging \n> output to stdout will break the connection. All logs should be redirected to stderr only.\n> See CLAUDE_DESKTOP_SETUP.md for detailed troubleshooting tips.\n\n### Available Tools\n\nThe server currently provides the following tools:\n\n1. **get_status** - A system status tool that returns processing information to verify connection\n   - Optional parameter: `name` - A name to include in the greeting\n\n#### 1. `read_file`\nRead the contents of a specific file within a folder.\n\n**Parameters:**\n- `folder_path`: Path to the folder containing the file\n- `file_path`: Relative path to the file within the folder\n\n#### 2. `search_files`\nSearch for files matching a specific pattern.\n\n**Parameters:**\n- `folder_path`: Path to the folder to search\n- `pattern`: File pattern (e.g., \"*.md\", \"*.txt\", \"config.*\")\n\n#### 3. `list_files`\nList all files in a folder recursively.\n\n**Parameters:**\n- `folder_path`: Path to the folder to list\n\n#### 4. `get_folder_info`\nGet information about a folder including file count and metadata.\n\n**Parameters:**\n- `folder_path`: Path to the folder to analyze\n\n### Security Features\n\n- **Path Validation**: Prevents access to files outside the specified folder\n- **Directory Exclusions**: Automatically excludes node_modules, .git, and cache folders\n- **Error Handling**: Graceful handling of permission errors and invalid paths\n\n## Architecture\n\n### MCP Server Implementation\n\nThe server implements the Model Context Protocol standard with the following components:\n\n```\nüì° MCP Client (Claude Desktop) ‚Üî üìû Stdio Transport ‚Üî üñ•Ô∏è MCP Server ‚Üî üìÅ File System\n```\n\n### File Access Pattern\n\n```\n1. Client Request ‚Üí 2. Tool Validation ‚Üí 3. Path Security Check ‚Üí 4. File Operation ‚Üí 5. Response\n```\n\n### Server Components\n\n- **Tool Handlers**: Process read_file, search_files, list_files, and get_folder_info requests\n- **Security Layer**: Validates paths and prevents directory traversal\n- **File Operations**: Uses Node.js fs and glob for efficient file system access\n- **Transport Layer**: Stdio transport for communication with MCP clients\n\n## Technical Details\n\n### Dependencies\n\n- `@modelcontextprotocol/sdk`: MCP protocol implementation\n- `glob`: Pattern-based file searching\n- `typescript`: Type-safe development\n- Additional libraries for future file parsing capabilities\n\n### File Patterns\n\nThe server uses glob patterns for file searching:\n- `*` - All files\n- `*.md` - Markdown files only  \n- `**/*.js` - JavaScript files recursively\n- `config.*` - Any file starting with \"config\"\n\n### Excluded Directories\n\nAutomatically excluded from all operations:\n- `**/node_modules/**`\n- `**/.git/**`\n- `**/.folder-mcp/**`\n\n## Development\n\n### Building the Project\n\n```bash\nnpm run build\n```\n\n### Running the Server\n\n```bash\nnpm start\n```\n\n### Development Mode\n\n```bash\nnpm run dev\n```\n\n### Testing with MCP Clients\n\nThe server can be tested with any MCP-compatible client. For Claude Desktop, add the configuration to your settings file.\n\n## Future Enhancements\n\n**üìã Development Roadmap:** See [ROADMAP.md](ROADMAP.md) for visual progress and [GITHUB_ISSUES.md](GITHUB_ISSUES.md) for detailed task breakdown.\n\n### Planned Features (17 remaining tasks):\n- **Phase 3:** Smart text chunking and semantic embeddings\n- **Phase 4:** FAISS vector search and similarity matching  \n- **Phase 5:** Enhanced MCP integration with semantic search\n- **Phase 6:** Real-time file watching and configuration system\n- **Phase 7:** Performance optimization and comprehensive testing\n- **Phase 8:** Documentation and npm release\n\n### Vision: Universal Folder-to-MCP Tool\nTransform any folder into an intelligent knowledge base with:\n- **Multi-format parsing**: PDF, Word, Excel, PowerPoint with structure preservation\n- **Semantic embeddings**: Nomic Embed model for intelligent content understanding  \n- **Vector search**: FAISS-powered similarity search for context-aware retrieval\n- **Smart chunking**: Meaning-based content segmentation\n- **Real-time updates**: File watching with automatic re-indexing\n- **RAG capabilities**: Enable LLMs to query folder contents intelligently\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built with the Model Context Protocol SDK\n- Uses TypeScript for type safety and developer experience\n- Designed for secure and efficient file system access\n- Compatible with Claude Desktop and other MCP clients\n\n---\n\n**Enable your LLM to work with local folders through the Model Context Protocol!** üöÄ\n",
    "type": "md",
    "originalPath": "README.md",
    "metadata": {
      "type": "md",
      "originalPath": "README.md",
      "size": 9301,
      "lastModified": "2025-06-17T00:16:07.790Z",
      "lines": 293,
      "encoding": "utf-8"
    }
  },
  "chunks": [
    {
      "content": "# folder-mcp\n\n**Model Context Protocol Server for Folder Operations**\n\nA Model Context Protocol (MCP) server that provides tools for reading and analyzing folder structures, enabling LLMs to interact with local file systems safely and efficiently.\n\n## Overview\nfolder-mcp was created for a simple but powerful purpose: take your local folder and make it accessible to Large Language Models (LLMs) running anywhere.\nYou don't need to upload your files to the cloud or use a third-party service.\n\nit creates RAG (Retrieval-Augmented Generation) capabilities for your local files, allowing LLMs to read, search, and analyze documents in a secure and structured way.\nThis server implements the Model Context Protocol (MCP) standard, allowing LLMs to interact with local file systems through a set of defined tools.\nThis project is designed to work with MCP clients like Claude Desktop, Cursor, VsCode and others, providing a secure and efficient way to access and manipulate files within specified folders.\n\n## Features\n\n‚úÖ **Secure File Access**\n- Read files from specified folders with path validation\n- Security checks to prevent directory traversal attacks\n- Support for various file types and encodings\n\n‚úÖ **File System Operations**\n- List all files in a folder recursively\n- Search files by name patterns (glob support)\n- Get folder information and metadata\n- Exclude common directories like node_modules and .git\n\n‚úÖ **MCP Integration**\n- Standard Model Context Protocol server implementation\n- Works with Claude Desktop and other MCP clients\n- Stdio transport for seamless integration\n- Structured tool definitions with JSON schemas\n\n‚úÖ **Developer Friendly**\n- TypeScript implementation with full type safety\n- Clear error handling and informative responses\n- Simple CLI interface for testing and development\n\n## Installation\n\n```bash\ngit clone https://github.com/okets/folder-mcp.git\ncd folder-mcp\nnpm install\nnpm run build\n```\n\n## Configuration\n\nfolder-mcp uses a centralized configuration system stored in `config.yaml` at the project root. This YAML file contains settings for embeddings, caching, processing, API, logging, and development configurations.\n\n### Embedding Models\n\nThe system supports multiple embedding models with GPU acceleration via Ollama:",
      "startPosition": 0,
      "endPosition": 2264,
      "tokenCount": 432,
      "chunkIndex": 0,
      "metadata": {
        "sourceFile": "README.md",
        "sourceType": "md",
        "totalChunks": 4,
        "hasOverlap": false,
        "originalMetadata": {
          "type": "md",
          "originalPath": "README.md",
          "size": 9301,
          "lastModified": "2025-06-17T00:16:07.790Z",
          "lines": 293,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "This YAML file contains settings for embeddings, caching, processing, API, logging, and development configurations.\n\n### Embedding Models\n\nThe system supports multiple embedding models with GPU acceleration via Ollama:\n\n| Model | Dimensions | Description |\n|-------|------------|-------------|\n| `nomic-v1.5` | 768 | High-quality general-purpose (default) |\n| `mxbai-large` | 1024 | Large model with excellent performance |\n| `all-minilm` | 384 | Lightweight and fast |\n| `bge-small` | 384 | BAAI general embedding, small version |\n| `gte-base` | 768 | General Text Embeddings model |\n\n### Configuration Structure\n\n```yaml\n# Embedding Model Configuration\nembeddings:\n  defaultModel: \"nomic-v1.5\"\n  ollamaApiUrl: \"http://127.0.0.1:11434\"\n  batchSize: 32\n  timeoutMs: 30000\n  models:\n    # Model definitions with dimensions, descriptions, etc.\n\n# Cache Configuration  \ncache:\n  defaultCacheDir: \"~/.cache/folder-mcp\"\n  maxCacheSize: \"10GB\"\n  cleanupIntervalHours: 24\n\n# Text Processing Configuration\nprocessing:\n  defaultChunkSize: 1000\n  defaultOverlap: 200\n  maxConcurrentOperations: 10\n\n# Development & Logging options\nlogging:\n  level: \"info\"\n  format: \"json\"\n\ndevelopment:\n  enableDebugOutput: false\n  mockOllamaApi: false\n```\n\nFor detailed configuration options, see [CONFIGURATION.md](docs/CONFIGURATION.md).\n\n## Current Status\n\nüöÄ **Version 1.0** - Basic MCP Server (13/30 planned features complete)\n\nThis is the foundation release providing secure file system access through MCP. The full vision includes semantic search, embeddings, and intelligent document parsing - see [ROADMAP.md](ROADMAP.md) for the complete development plan.\n\n**What works now:**\n- ‚úÖ Basic file reading and folder operations\n- ‚úÖ Security validation and path protection  \n- ‚úÖ Pattern-based file searching\n- ‚úÖ MCP protocol integration\n\n**Coming next:** Smart text chunking, semantic embeddings, vector search ([see all 30 planned features](GITHUB_ISSUES.md))\n\n## Usage\n\n### As an MCP Server\n\nThis server is designed to be used with MCP clients like Claude Desktop. Add it to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"folder-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"C:\\\\Path\\\\To\\\\folder-mcp\\\\dist\\\\mcp-server.js\",\n        \"C:\\\\Path\\\\To\\\\folder-mcp\"\n      ],\n      \"env\": {}\n    }\n  }\n}\n```\n\n> ‚ö†Ô∏è **Critical Claude Desktop Integration Note**: \n> The MCP protocol requires that ONLY valid JSON-RPC messages go to stdout. Any logging or debugging \n> output to stdout will break the connection. All logs should be redirected to stderr only.\n> See CLAUDE_DESKTOP_SETUP.md for detailed troubleshooting tips.\n\n### Available Tools\n\nThe server currently provides the following tools:\n\n1. **get_status** - A system status tool that returns processing information to verify connection\n   - Optional parameter: `name` - A name to include in the greeting\n\n#### 1. `read_file`\nRead the contents of a specific file within a folder.",
      "startPosition": 2046,
      "endPosition": 4984,
      "tokenCount": 498,
      "chunkIndex": 1,
      "metadata": {
        "sourceFile": "README.md",
        "sourceType": "md",
        "totalChunks": 4,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "README.md",
          "size": 9301,
          "lastModified": "2025-06-17T00:16:07.790Z",
          "lines": 293,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "**get_status** - A system status tool that returns processing information to verify connection\n   - Optional parameter: `name` - A name to include in the greeting\n\n#### 1. `read_file`\nRead the contents of a specific file within a folder.\n\n**Parameters:**\n- `folder_path`: Path to the folder containing the file\n- `file_path`: Relative path to the file within the folder\n\n#### 2. `search_files`\nSearch for files matching a specific pattern.\n\n**Parameters:**\n- `folder_path`: Path to the folder to search\n- `pattern`: File pattern (e.g., \"*.md\", \"*.txt\", \"config.*\")\n\n#### 3. `list_files`\nList all files in a folder recursively.\n\n**Parameters:**\n- `folder_path`: Path to the folder to list\n\n#### 4. `get_folder_info`\nGet information about a folder including file count and metadata.\n\n**Parameters:**\n- `folder_path`: Path to the folder to analyze\n\n### Security Features\n\n- **Path Validation**: Prevents access to files outside the specified folder\n- **Directory Exclusions**: Automatically excludes node_modules, .git, and cache folders\n- **Error Handling**: Graceful handling of permission errors and invalid paths\n\n## Architecture\n\n### MCP Server Implementation\n\nThe server implements the Model Context Protocol standard with the following components:\n\n```\nüì° MCP Client (Claude Desktop) ‚Üî üìû Stdio Transport ‚Üî üñ•Ô∏è MCP Server ‚Üî üìÅ File System\n```\n\n### File Access Pattern\n\n```\n1. Client Request ‚Üí 2. Tool Validation ‚Üí 3. Path Security Check ‚Üí 4. File Operation ‚Üí 5. Response\n```\n\n### Server Components\n\n- **Tool Handlers**: Process read_file, search_files, list_files, and get_folder_info requests\n- **Security Layer**: Validates paths and prevents directory traversal\n- **File Operations**: Uses Node.js fs and glob for efficient file system access\n- **Transport Layer**: Stdio transport for communication with MCP clients\n\n## Technical Details\n\n### Dependencies\n\n- `@modelcontextprotocol/sdk`: MCP protocol implementation\n- `glob`: Pattern-based file searching\n- `typescript`: Type-safe development\n- Additional libraries for future file parsing capabilities\n\n### File Patterns\n\nThe server uses glob patterns for file searching:\n- `*` - All files\n- `*.md` - Markdown files only  \n- `**/*.js` - JavaScript files recursively\n- `config.*` - Any file starting with \"config\"\n\n### Excluded Directories\n\nAutomatically excluded from all operations:\n- `**/node_modules/**`\n- `**/.git/**`\n- `**/.folder-mcp/**`\n\n## Development\n\n### Building the Project\n\n```bash\nnpm run build\n```\n\n### Running the Server\n\n```bash\nnpm start\n```\n\n### Development Mode\n\n```bash\nnpm run dev\n```\n\n### Testing with MCP Clients",
      "startPosition": 4747,
      "endPosition": 7342,
      "tokenCount": 491,
      "chunkIndex": 2,
      "metadata": {
        "sourceFile": "README.md",
        "sourceType": "md",
        "totalChunks": 4,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "README.md",
          "size": 9301,
          "lastModified": "2025-06-17T00:16:07.790Z",
          "lines": 293,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "\n\nThe server can be tested with any MCP-compatible client. For Claude Desktop, add the configuration to your settings file.\n\n## Future Enhancements\n\n**üìã Development Roadmap:** See [ROADMAP.md](ROADMAP.md) for visual progress and [GITHUB_ISSUES.md](GITHUB_ISSUES.md) for detailed task breakdown.\n\n### Planned Features (17 remaining tasks):\n- **Phase 3:** Smart text chunking and semantic embeddings\n- **Phase 4:** FAISS vector search and similarity matching  \n- **Phase 5:** Enhanced MCP integration with semantic search\n- **Phase 6:** Real-time file watching and configuration system\n- **Phase 7:** Performance optimization and comprehensive testing\n- **Phase 8:** Documentation and npm release\n\n### Vision: Universal Folder-to-MCP Tool\nTransform any folder into an intelligent knowledge base with:\n- **Multi-format parsing**: PDF, Word, Excel, PowerPoint with structure preservation\n- **Semantic embeddings**: Nomic Embed model for intelligent content understanding  \n- **Vector search**: FAISS-powered similarity search for context-aware retrieval\n- **Smart chunking**: Meaning-based content segmentation\n- **Real-time updates**: File watching with automatic re-indexing\n- **RAG capabilities**: Enable LLMs to query folder contents intelligently\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built with the Model Context Protocol SDK\n- Uses TypeScript for type safety and developer experience\n- Designed for secure and efficient file system access\n- Compatible with Claude Desktop and other MCP clients\n\n---\n\n**Enable your LLM to work with local folders through the Model Context Protocol!** üöÄ",
      "startPosition": 7342,
      "endPosition": 9248,
      "tokenCount": 340,
      "chunkIndex": 3,
      "metadata": {
        "sourceFile": "README.md",
        "sourceType": "md",
        "totalChunks": 4,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "README.md",
          "size": 9301,
          "lastModified": "2025-06-17T00:16:07.790Z",
          "lines": 293,
          "encoding": "utf-8"
        }
      }
    }
  ],
  "processedAt": "2025-06-18T20:41:34.797Z"
}