{
  "parsedContent": {
    "content": "# VSCode MCP Development Configuration Examples\n\n## üö® CRITICAL: Test Folder Setup\n\n**‚ö†Ô∏è ALWAYS USE THE DEDICATED TEST FOLDER**: `C:\\ThinkingHomes\\test-folder`\n\n- **‚úÖ CORRECT**: `C:\\ThinkingHomes\\test-folder` - Use this for ALL testing and development\n- **‚ùå WRONG**: `C:\\ThinkingHomes\\folder-mcp` - NEVER use the project folder as the target\n\n### Why This Matters:\n- Prevents cache pollution in the project directory  \n- Ensures clean testing environment\n- Avoids indexing source code files during development\n- Prevents `.folder-mcp` cache folders from appearing in the project\n\n### Test Folder Structure:\n```\nC:\\ThinkingHomes\\test-folder\\\n‚îú‚îÄ‚îÄ test-document-1.md\n‚îú‚îÄ‚îÄ test-document-2.md  \n‚îú‚îÄ‚îÄ sample.txt\n‚îú‚îÄ‚îÄ subfolder/\n‚îÇ   ‚îî‚îÄ‚îÄ nested-doc.md\n‚îî‚îÄ‚îÄ (add your own test files here)\n```\n\n**Before running any tests**: Ensure the test folder exists and contains sample files.\n\n## Basic Development Configuration\n\nAdd this to your VSCode MCP servers configuration to enable development mode with tool sets:\n\n```json\n{\n  \"servers\": {\n    \"folder-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\ThinkingHomes\\\\folder-mcp\\\\dist\\\\index.js\", \"C:\\\\ThinkingHomes\\\\test-folder\"],\n      \"dev\": {\n        \"watch\": \"dist/**/*.js\",\n        \"debug\": { \n          \"type\": \"node\",\n          \"port\": 9229 \n        }\n      },\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      }\n    }\n  }\n}\n```\n\n## Tool Sets Feature\n\nThe server now organizes tools into logical groups:\n\n### Document Access\n- `get_document_content`\n- `get_document_metadata` \n- `get_chunks`\n\n### Content Analysis\n- `summarize_document`\n- `batch_summarize`\n- `query_table`\n\n### Workspace Navigation\n- `list_folders`\n- `list_documents`\n- `get_status`\n\n### Search Intelligence\n- `search_documents`\n- `search_chunks`\n\n### System Operations\n- `get_status`\n- `refresh_document`\n- `get_embeddings`\n\n## MCP Resources\n\nResources are now available for save/drag operations:\n- Search results can be saved as files\n- Document content can be dragged to editor\n- Analysis results can be attached as context\n\n## Expected VSCode Features\n\nWith VSCode 1.101+, you should see:\n1. **Organized Tools**: Tools grouped by functionality with icons\n2. **MCP Prompts**: Use slash commands like `/mcp.folder-mcp.search`\n3. **Save/Drag**: Save button on search results, drag to explorer\n4. **Development Mode**: Hot reload when server files change\n5. **Implicit Context**: Automatic awareness of current file\n\n## Usage Examples\n\n### Quick Search (MCP Prompt)\n```\n/mcp.folder-mcp.search documentation typescript\n```\n\n### Save Search Results\n1. Run search_documents tool\n2. Click \"Save\" button on results\n3. Choose location in workspace\n\n### Drag Document Content\n1. Run get_document_content tool\n2. Drag result to Explorer view\n3. Creates new file with content\n\n## Development Workflow\n\n1. Make changes to server code\n2. VSCode automatically detects changes\n3. Server reloads without restart\n4. Test changes immediately\n\nThis significantly improves the development experience compared to Claude Desktop's restart cycle.\n",
    "type": "md",
    "originalPath": "docs\\Legacy\\roadmap\\todo\\vscode-support\\VSCODE_DEVELOPMENT_SETUP.md",
    "metadata": {
      "type": "md",
      "originalPath": "docs\\Legacy\\roadmap\\todo\\vscode-support\\VSCODE_DEVELOPMENT_SETUP.md",
      "size": 3090,
      "lastModified": "2025-06-16T23:32:54.801Z",
      "lines": 123,
      "encoding": "utf-8"
    }
  },
  "chunks": [
    {
      "content": "# VSCode MCP Development Configuration Examples\n\n## üö® CRITICAL: Test Folder Setup\n\n**‚ö†Ô∏è ALWAYS USE THE DEDICATED TEST FOLDER**: `C:\\ThinkingHomes\\test-folder`\n\n- **‚úÖ CORRECT**: `C:\\ThinkingHomes\\test-folder` - Use this for ALL testing and development\n- **‚ùå WRONG**: `C:\\ThinkingHomes\\folder-mcp` - NEVER use the project folder as the target\n\n### Why This Matters:\n- Prevents cache pollution in the project directory  \n- Ensures clean testing environment\n- Avoids indexing source code files during development\n- Prevents `.folder-mcp` cache folders from appearing in the project\n\n### Test Folder Structure:\n```\nC:\\ThinkingHomes\\test-folder\\\n‚îú‚îÄ‚îÄ test-document-1.md\n‚îú‚îÄ‚îÄ test-document-2.md  \n‚îú‚îÄ‚îÄ sample.txt\n‚îú‚îÄ‚îÄ subfolder/\n‚îÇ   ‚îî‚îÄ‚îÄ nested-doc.md\n‚îî‚îÄ‚îÄ (add your own test files here)\n```\n\n**Before running any tests**: Ensure the test folder exists and contains sample files.\n\n## Basic Development Configuration\n\nAdd this to your VSCode MCP servers configuration to enable development mode with tool sets:\n\n```json\n{\n  \"servers\": {\n    \"folder-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\ThinkingHomes\\\\folder-mcp\\\\dist\\\\index.js\", \"C:\\\\ThinkingHomes\\\\test-folder\"],\n      \"dev\": {\n        \"watch\": \"dist/**/*.js\",\n        \"debug\": { \n          \"type\": \"node\",\n          \"port\": 9229 \n        }\n      },\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      }\n    }\n  }\n}\n```\n\n## Tool Sets Feature\n\nThe server now organizes tools into logical groups:\n\n### Document Access\n- `get_document_content`\n- `get_document_metadata` \n- `get_chunks`\n\n### Content Analysis\n- `summarize_document`\n- `batch_summarize`\n- `query_table`\n\n### Workspace Navigation\n- `list_folders`\n- `list_documents`\n- `get_status`\n\n### Search Intelligence\n- `search_documents`\n- `search_chunks`\n\n### System Operations\n- `get_status`\n- `refresh_document`\n- `get_embeddings`\n\n## MCP Resources\n\nResources are now available for save/drag operations:\n- Search results can be saved as files\n- Document content can be dragged to editor\n- Analysis results can be attached as context\n\n## Expected VSCode Features\n\nWith VSCode 1.101+, you should see:\n1. **Organized Tools**: Tools grouped by functionality with icons\n2. **MCP Prompts**: Use slash commands like `/mcp.folder-mcp.search`\n3. **Save/Drag**: Save button on search results, drag to explorer\n4. **Development Mode**: Hot reload when server files change\n5. **Implicit Context**: Automatic awareness of current file\n\n## Usage Examples\n\n### Quick Search (MCP Prompt)\n```\n/mcp.folder-mcp.search documentation typescript\n```\n\n### Save Search Results\n1. Run search_documents tool\n2. Click \"Save\" button on results\n3. Choose location in workspace\n\n### Drag Document Content\n1. Run get_document_content tool\n2. Drag result to Explorer view\n3. Creates new file with content\n\n## Development Workflow\n\nRun search_documents tool\n2. Click \"Save\" button on results\n3. Choose location in workspace\n\n### Drag Document Content\n1. Run get_document_content tool\n2. Drag result to Explorer view\n3. Creates new file with content\n\n## Development Workflow\n\n1. Make changes to server code\n2. VSCode automatically detects changes\n3. Server reloads without restart\n4. Test changes immediately\n\nThis significantly improves the development experience compared to Claude Desktop's restart cycle.",
      "startPosition": 0,
      "endPosition": 3041,
      "tokenCount": 567,
      "chunkIndex": 0,
      "metadata": {
        "sourceFile": "docs\\Legacy\\roadmap\\todo\\vscode-support\\VSCODE_DEVELOPMENT_SETUP.md",
        "sourceType": "md",
        "totalChunks": 1,
        "hasOverlap": false,
        "originalMetadata": {
          "type": "md",
          "originalPath": "docs\\Legacy\\roadmap\\todo\\vscode-support\\VSCODE_DEVELOPMENT_SETUP.md",
          "size": 3090,
          "lastModified": "2025-06-16T23:32:54.801Z",
          "lines": 123,
          "encoding": "utf-8"
        }
      }
    }
  ],
  "processedAt": "2025-06-18T20:41:36.473Z"
}