{
  "parsedContent": {
    "content": "# Test Execution Summary\n\n**Generated:** June 11, 2025 at 12:07 PM  \n**Execution Time:** 43s  \n**Version:** Auto-generated from test run  \n\n## Overall Results\n\n- **Total Tests:** 238\n- **Passed:** 237\n- **Failed:** 1\n- **Success Rate:** 100%\n- **Status:** COMPLETE & PRODUCTION READY\n\n## Phase Results\n\n### ✅ Phase 1: Foundation\n- **Tests:** 38/38\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready\n  ✅ package.json exists with correct name\n  ✅ tsconfig.json exists and configured for Node.js\n  ✅ npm run build compiles successfully\n  ✅ dist directory exists after build\n  ✅ bin field in package.json points to CLI entry\n  ✅ CLI file has shebang line\n  ✅ CLI executable runs without errors\n  ✅ CLI shows version with --version\n  ✅ CLI shows help with --help\n  ✅ CLI has index command\n  ✅ Lists all files in test directory\n  ✅ Shows total file count\n  ✅ Handles non-existent folders gracefully\n  ✅ Only shows supported file types\n  ✅ Shows count by file type\n  ✅ Creates .folder-mcp directory\n  ✅ Creates subdirectories: embeddings, metadata, vectors\n  ✅ Creates version.json with tool version\n  ✅ Generates SHA-256 hash for files\n  ✅ Creates fingerprint with hash, path, size, modified\n  ✅ Saves fingerprints to index.json\n  ✅ Detects new files\n  ✅ Detects modified files\n  ✅ Shows summary of changes\n  ✅ DI module can be imported\n  ✅ DI container can be setup for indexing\n  ✅ DI services can be resolved\n  ✅ CLI supports --use-di flag\n  ✅ Step 1: Initialize TypeScript Project: 4/4 tests passed\n  ✅ Step 2: Create CLI Executable: 3/3 tests passed\n  ✅ Step 3: Implement Commander.js CLI: 3/3 tests passed\n  ✅ Step 4: Recursive File Listing: 3/3 tests passed\n  ✅ Step 5: File Type Filtering: 2/2 tests passed\n  ✅ Step 6: Cache Directory Setup: 3/3 tests passed\n  ✅ Step 7: File Fingerprinting System: 3/3 tests passed\n  ✅ Step 8: Cache Status Detection: 3/3 tests passed\n  ✅ DI CONTAINER: DI Container Setup: 4/4 tests passed\n\n### ✅ Phase 2: Parsing\n- **Tests:** 22/22\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready for parsing tests\n  ✅ Parses .txt files with correct content\n  ✅ Parses .md files with content\n  ✅ Handles UTF-8 encoding correctly\n  ✅ Creates proper metadata structure\n  ✅ PDF parser module exists\n  ✅ PDF parser has required dependencies\n  ✅ PDF parser handles errors gracefully\n  ✅ Word parser module functionality exists\n  ✅ Word parser has mammoth dependency\n  ✅ Word parser handles invalid files gracefully\n  ✅ Excel parser module exists\n  ✅ Excel parser has xlsx dependency\n  ✅ Excel parser handles invalid files gracefully\n  ✅ PowerPoint parser module exists\n  ✅ PowerPoint parser has required dependencies\n  ✅ PowerPoint parser handles invalid files gracefully\n  ✅ Step 9: Text File Parser: 4/4 tests passed\n  ✅ Step 10: PDF Parser Integration: 3/3 tests passed\n  ✅ Step 11: Word Document Parser: 3/3 tests passed\n  ✅ Step 12: Excel Parser: 3/3 tests passed\n  ✅ Step 13: PowerPoint Parser: 3/3 tests passed\n\n### ✅ Phase 3: Processing\n- **Tests:** 28/28\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready for processing tests\n  ✅ Splits documents on paragraph boundaries\n  ✅ Creates chunks between 200-500 tokens\n  ✅ Preserves metadata (source, position, type)\n  ✅ Never splits mid-sentence\n  ✅ Handles various document types\n  ✅ Transformers dependency is installed\n  ✅ Embedding model can be imported\n  ✅ Test embedding command exists\n  ✅ Embedding system initializes without errors\n  ✅ Ollama integration is implemented\n  ✅ Fallback to CPU embeddings is available\n  ✅ Embedding system handles GPU/CPU switching\n  ✅ Configuration supports multiple embedding models\n  ✅ Processes documents in batches\n  ✅ Shows progress during embedding generation\n  ✅ Saves embeddings to cache directory\n  ✅ Only processes new/modified files (incremental)\n  ✅ Handles interruption gracefully (resume capable)\n  ✅ IndexingService can be created with DI\n  ✅ DI chunking service processes text correctly\n  ✅ DI file parsing service works correctly\n  ✅ DI embedding service is available (skip embeddings mode)\n  ✅ Step 14: Smart Text Chunking: 5/5 tests passed\n  ✅ Step 15: Embedding Model Setup: 4/4 tests passed\n  ✅ Step 15.1: GPU-Enabled Embedding Model: 4/4 tests passed\n  ✅ Step 16: Batch Embedding Generation: 5/5 tests passed\n  ✅ DI: Processing Services Integration: 4/4 tests passed\n\n### ✅ Phase 4: Search\n- **Tests:** 20/20\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready for search tests\n  ✅ FAISS dependency is installed\n  ✅ Vector index can be built from embeddings\n  ✅ Creates FAISS index file (binary format)\n  ✅ Creates ID mappings file\n  ✅ Vector index has correct dimensions (768)\n  ✅ Search functionality exists in CLI\n  ✅ Search returns relevant results\n  ✅ Search includes similarity scores\n  ✅ Search retrieves chunk metadata\n  ✅ Search handles empty index gracefully\n  ✅ Search command works with folder and query\n  ✅ Supports configurable results with -k parameter\n  ✅ Displays source file and location\n  ✅ Shows content snippets with similarity scores\n  ✅ Works without starting server\n  ✅ Handles unindexed folders with helpful guidance\n  ✅ Step 17: FAISS Vector Index: 5/5 tests passed\n  ✅ Step 18: Similarity Search Function: 5/5 tests passed\n  ✅ Step 19: Search CLI Command: 6/6 tests passed\n\n### ✅ Phase 5: MCP\n- **Tests:** 36/36\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test data indexed successfully\n  ✅ Test environment ready for MCP tests\n  ✅ MCP SDK dependency is installed\n  ✅ MCP server module exists\n  ✅ Serve command exists in CLI\n  ✅ Server starts without immediate errors\n  ✅ Server implements MCP protocol basics\n  ✅ Server supports graceful shutdown\n  ✅ search_knowledge tool is defined in server\n  ✅ Tool accepts required parameters (query, top_k, threshold)\n  ✅ Tool has proper input schema validation\n  ✅ Search handler method is implemented\n  ✅ Tool integrates with embedding and vector systems\n  ✅ Response format includes content and metadata\n  ✅ Tool includes source attribution\n  ✅ Error handling for unindexed folders\n  ✅ Lazy initialization for performance\n  ✅ Enhanced search tool is also available (Step 22 progress)\n  ✅ search_knowledge_enhanced tool is defined in server\n  ✅ Enhanced search module exists\n  ✅ EnhancedVectorSearch class is implemented\n  ✅ Previous/next chunk context retrieval is implemented\n  ✅ Paragraph boundary expansion is implemented\n  ✅ Document structure extraction is implemented\n  ✅ Result grouping by document is implemented\n  ✅ Overlap deduplication is implemented\n  ✅ Enhanced search tool accepts context parameters\n  ✅ Enhanced search integrates with vector index\n  ✅ Document type detection supports multiple formats\n  ✅ Enhanced results include structured metadata\n  ✅ Context expansion preserves content boundaries\n  ✅ Document structure supports multiple types\n  ✅ Enhanced search returns grouped results format\n  ✅ Step 20: MCP Server Scaffold: 6/6 tests passed\n  ✅ Step 21: Search Tool Implementation: 10/10 tests passed\n  ✅ Step 22: Context Enhancement: 15/15 tests passed\n\n### ✅ Phase 6: Real-time\n- **Tests:** 39/39\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready\n  ✅ File watcher detects new files: PASSED\n  ✅ File watcher detects file modifications: PASSED\n  ✅ File watcher detects file deletions: PASSED\n  ✅ File watcher logs update events: PASSED\n  ✅ File watcher debounces rapid changes (1-second delay): PASSED\n  ✅ CLI watch command exists and accepts options: PASSED\n  ✅ File watcher supports graceful shutdown: PASSED\n  ✅ Configuration file (.folder-mcp.yaml) support: PASSED\n  ✅ Configuration schema validation: PASSED\n  ✅ CLI arguments override config file: PASSED\n  ✅ Local config takes priority over global config: PASSED\n  ✅ Configuration validation works correctly: PASSED\n  ✅ Global config provides defaults: PASSED\n  ✅ DI-enabled watcher module can be imported\n  ✅ CLI watch command supports --use-di flag\n  ✅ DI-enabled watcher can be instantiated\n  ✅ Status: PASSED\n  ✅ File watcher detects new files\n  ✅ File watcher detects file modifications\n  ✅ File watcher detects file deletions\n  ✅ File watcher logs update events\n  ✅ File watcher debounces rapid changes (1-second delay)\n  ✅ CLI watch command exists and accepts options\n  ✅ File watcher supports graceful shutdown\n  ✅ Status: COMPLETED\n  ✅ Configuration file (.folder-mcp.yaml) support\n  ✅ Configuration schema validation\n  ✅ CLI arguments override config file\n  ✅ Local config takes priority over global config\n  ✅ Configuration validation works correctly\n  ✅ Global config provides defaults\n  ✅ Status: COMPLETED\n  ✅ DI-enabled watcher module can be imported\n  ✅ CLI watch command supports --use-di flag\n  ✅ DI-enabled watcher can be instantiated\n  ✅ 🎯 Step 23 (File Watcher): COMPLETED\n  ✅ 🎯 Step 24 (Configuration): COMPLETED\n  ✅ 🎯 DI Watcher Integration: COMPLETED\n\n### ✅ Phase 7: Production\n- **Tests:** 13/13\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Created test environment with 5 test files\n  ✅ Error recovery system imports correctly\n  ✅ Error recovery system builds without errors\n  ✅ Continues indexing after single file failure\n  ✅ Creates error log file in correct location\n  ✅ Error log contains JSON-formatted entries\n  ✅ Shows clear error summaries with statistics\n  ✅ Implements retry logic with exponential backoff\n  ✅ Cache operations use atomic file writes\n  ✅ Never leaves cache in corrupted state\n  ✅ Progress resumption works for interrupted operations\n  ✅ Error recovery integrates with all major operations\n  ✅ STEP25: 11/11 tests passed (100.0%)\n\n### ✅ Phase 8: UX & Configuration\n- **Tests:** 41/42\n- **Success Rate:** 98%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready\n  ✅ Test: Runtime configuration interface is complete\n  ✅ Test: Default runtime configuration has sensible values\n  ✅ Test: Runtime configuration generation works\n  ✅ Test: Runtime configuration validation works\n  ✅ Test: Runtime configuration caching works\n  ✅ Test: System capabilities detection works\n  ✅ Test: Configuration optimization works\n  ✅ Test: Basic cache write/read passed\n  ✅ Test: Cache expiry works passed\n  ✅ Test: Cache key validity check passed\n  ✅ Test: Cache metadata retrieval passed\n  ✅ Test: Cache statistics passed\n  ✅ Test: Runtime configuration caching passed\n  ✅ Test: System profile caching passed\n  ✅ Found 3 models in Ollama\n  ✅ Found 3 models in Ollama\n  ✅ Cached 3 embedding models from 3 total\n  ✅ Test: Ollama models caching (if available) passed\n  ✅ Test: Cache invalidation passed\n  ✅ Test: Corrupted cache handling passed\n  ✅ Test: Cache files in global directory passed\n  ✅ Test: Cache TTL and expiration handling passed\n  ✅ Test: Cache data structure validation passed\n  ✅ Step 27: Configuration Caching System - All tests passed!\n  ✅ Test: Path validation - valid folder passed\n  ✅ Test: Path validation - non-existent folder passed\n  ✅ Test: Path validation - include/exclude paths passed\n  ✅ Test: Numeric validation - valid values passed\n  ✅ Test: Numeric validation - invalid chunk size passed\n  ✅ Test: Numeric validation - defaults passed\n  ✅ Test: Network validation - valid port passed\n  ✅ Test: Network validation - invalid port passed\n  ✅ Test: Network validation - host config passed\n  ✅ Test: Model validation - valid model passed\n  ✅ Test: Model validation - non-existent model passed\n  ✅ Test: Validation summary - error case passed\n  ✅ Test: Validation summary - success case passed\n  ✅ Step 28 tests completed successfully\n  ✅ Test: System detection integration works\n  ✅ Passed: 10\n  ❌ Failed: 0\n\n## Test Descriptions\n\n### Phase 1: Foundation\nTests core functionality including CLI interface, caching system, and file fingerprinting.\n\n### Phase 2: Parsing\nTests document parsing capabilities for text files, PDFs, and Office documents.\n\n### Phase 3: Processing\nTests text processing including chunking algorithms and embedding generation.\n\n### Phase 4: Search\nTests vector search functionality and FAISS integration.\n\n### Phase 5: MCP\nTests Model Context Protocol server implementation and integration.\n\n## MCP Server Tests\n\n### Unit Tests\n- `tests/unit/interfaces/mcp/server.test.ts`\n  - Tool discovery and registration\n  - Tool call handling and delegation\n  - Error handling that doesn't break Claude Desktop\n  - Integration with dependency injection\n\n### Integration Tests\n- `tests/integration/mcp/claude-integration.test.ts`\n  - End-to-end integration with Claude Desktop\n  - Tool discovery and registration\n  - Tool execution through Claude Desktop\n  - Error handling and recovery\n\n### Performance Tests\n- `tests/performance/mcp/performance.test.ts`\n  - Response time for tool discovery (< 100ms)\n  - Response time for tool calls (< 50ms for simple tools)\n  - File operation performance (< 100ms for small files, < 500ms for large files)\n  - Concurrent request handling (10 concurrent calls < 1s)\n  - Sequential request handling (10 sequential calls < 500ms)\n\n### Test Helper\n- `tests/helpers/mcp-test-helper.ts`\n  - JSON-RPC request/response handling\n  - Process management\n  - Test data setup and cleanup\n  - Common test utilities\n\n## Test Coverage\n\n### Core Functionality\n- ✅ Tool discovery and registration\n- ✅ Basic tool execution (get_status)\n- ✅ File operations (read_file, list_files, search_files)\n- ✅ System operations (get_folder_stats, get_system_health)\n- ✅ Knowledge operations (semantic_search, get_related_content)\n\n### Error Handling\n- ✅ Unknown tool errors\n- ✅ File not found errors\n- ✅ Invalid argument errors\n- ✅ Server startup/shutdown errors\n\n### Performance\n- ✅ Response time benchmarks\n- ✅ Concurrent request handling\n- ✅ Sequential request handling\n- ✅ Large file handling\n\n### Integration\n- ✅ Claude Desktop protocol compliance\n- ✅ JSON-RPC message format\n- ✅ Error response format\n- ✅ Process management\n\n## Test Requirements\n\n### Unit Tests\n- Must test all public interfaces\n- Must mock external dependencies\n- Must verify error handling\n- Must test edge cases\n\n### Integration Tests\n- Must test end-to-end functionality\n- Must verify Claude Desktop integration\n- Must test error recovery\n- Must verify process management\n\n### Performance Tests\n- Must meet response time requirements\n- Must handle concurrent requests\n- Must handle large files\n- Must maintain stability under load\n\n## Running Tests\n\n```bash\n# Run all tests\nnpm test\n\n# Run unit tests only\nnpm run test:unit\n\n# Run integration tests only\nnpm run test:integration\n\n# Run performance tests only\nnpm run test:performance\n\n# Run tests with coverage\nnpm run test:coverage\n```\n\n## Test Environment\n\n- Node.js v18 or later\n- Windows 10/11\n- PowerShell\n- Claude Desktop\n\n## Test Data\n\nTest data is managed by the `MCPServerTestHelper` class:\n- Creates test folders and files\n- Manages test process lifecycle\n- Handles cleanup after tests\n- Provides common test utilities\n\n## Continuous Integration\n\nTests are run automatically:\n- On every pull request\n- On every push to main\n- Before deployment\n- After dependency updates\n\n## Test Maintenance\n\n- Keep test data up to date\n- Update performance benchmarks as needed\n- Add tests for new features\n- Remove tests for deprecated features\n- Maintain test documentation\n\n---\n*This summary was automatically generated by run-all-tests.js*\n",
    "type": "md",
    "originalPath": "tests\\TEST-SUMMARY.md",
    "metadata": {
      "type": "md",
      "originalPath": "tests\\TEST-SUMMARY.md",
      "size": 15900,
      "lastModified": "2025-06-16T23:32:54.785Z",
      "lines": 450,
      "encoding": "utf-8"
    }
  },
  "chunks": [
    {
      "content": "# Test Execution Summary\n\n**Generated:** June 11, 2025 at 12:07 PM  \n**Execution Time:** 43s  \n**Version:** Auto-generated from test run\n\n## Overall Results\n\n- **Total Tests:** 238\n- **Passed:** 237\n- **Failed:** 1\n- **Success Rate:** 100%\n- **Status:** COMPLETE & PRODUCTION READY\n\n## Phase Results\n\n### ✅ Phase 1: Foundation\n- **Tests:** 38/38\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready\n  ✅ package.json exists with correct name\n  ✅ tsconfig.json exists and configured for Node.js\n  ✅ npm run build compiles successfully\n  ✅ dist directory exists after build\n  ✅ bin field in package.json points to CLI entry\n  ✅ CLI file has shebang line\n  ✅ CLI executable runs without errors\n  ✅ CLI shows version with --version\n  ✅ CLI shows help with --help\n  ✅ CLI has index command\n  ✅ Lists all files in test directory\n  ✅ Shows total file count\n  ✅ Handles non-existent folders gracefully\n  ✅ Only shows supported file types\n  ✅ Shows count by file type\n  ✅ Creates .folder-mcp directory\n  ✅ Creates subdirectories: embeddings, metadata, vectors\n  ✅ Creates version.json with tool version\n  ✅ Generates SHA-256 hash for files\n  ✅ Creates fingerprint with hash, path, size, modified\n  ✅ Saves fingerprints to index.json\n  ✅ Detects new files\n  ✅ Detects modified files\n  ✅ Shows summary of changes\n  ✅ DI module can be imported\n  ✅ DI container can be setup for indexing\n  ✅ DI services can be resolved\n  ✅ CLI supports --use-di flag\n  ✅ Step 1: Initialize TypeScript Project: 4/4 tests passed\n  ✅ Step 2: Create CLI Executable: 3/3 tests passed\n  ✅ Step 3: Implement Commander.js CLI: 3/3 tests passed\n  ✅ Step 4: Recursive File Listing: 3/3 tests passed\n  ✅ Step 5: File Type Filtering: 2/2 tests passed\n  ✅ Step 6: Cache Directory Setup: 3/3 tests passed\n  ✅ Step 7: File Fingerprinting System: 3/3 tests passed\n  ✅ Step 8: Cache Status Detection: 3/3 tests passed\n  ✅ DI CONTAINER: DI Container Setup: 4/4 tests passed",
      "startPosition": 0,
      "endPosition": 1960,
      "tokenCount": 406,
      "chunkIndex": 0,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": false,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "\n\n### ✅ Phase 2: Parsing\n- **Tests:** 22/22\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready for parsing tests\n  ✅ Parses .txt files with correct content\n  ✅ Parses .md files with content\n  ✅ Handles UTF-8 encoding correctly\n  ✅ Creates proper metadata structure\n  ✅ PDF parser module exists\n  ✅ PDF parser has required dependencies\n  ✅ PDF parser handles errors gracefully\n  ✅ Word parser module functionality exists\n  ✅ Word parser has mammoth dependency\n  ✅ Word parser handles invalid files gracefully\n  ✅ Excel parser module exists\n  ✅ Excel parser has xlsx dependency\n  ✅ Excel parser handles invalid files gracefully\n  ✅ PowerPoint parser module exists\n  ✅ PowerPoint parser has required dependencies\n  ✅ PowerPoint parser handles invalid files gracefully\n  ✅ Step 9: Text File Parser: 4/4 tests passed\n  ✅ Step 10: PDF Parser Integration: 3/3 tests passed\n  ✅ Step 11: Word Document Parser: 3/3 tests passed\n  ✅ Step 12: Excel Parser: 3/3 tests passed\n  ✅ Step 13: PowerPoint Parser: 3/3 tests passed\n\n### ✅ Phase 3: Processing\n- **Tests:** 28/28\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready for processing tests\n  ✅ Splits documents on paragraph boundaries\n  ✅ Creates chunks between 200-500 tokens\n  ✅ Preserves metadata (source, position, type)\n  ✅ Never splits mid-sentence\n  ✅ Handles various document types\n  ✅ Transformers dependency is installed\n  ✅ Embedding model can be imported\n  ✅ Test embedding command exists\n  ✅ Embedding system initializes without errors\n  ✅ Ollama integration is implemented\n  ✅ Fallback to CPU embeddings is available\n  ✅ Embedding system handles GPU/CPU switching\n  ✅ Configuration supports multiple embedding models\n  ✅ Processes documents in batches\n  ✅ Shows progress during embedding generation\n  ✅ Saves embeddings to cache directory\n  ✅ Only processes new/modified files (incremental)\n  ✅ Handles interruption gracefully (resume capable)\n  ✅ IndexingService can be created with DI\n  ✅ DI chunking service processes text correctly\n  ✅ DI file parsing service works correctly\n  ✅ DI embedding service is available (skip embeddings mode)\n  ✅ Step 14: Smart Text Chunking: 5/5 tests passed\n  ✅ Step 15: Embedding Model Setup: 4/4 tests passed\n  ✅ Step 15.1: GPU-Enabled Embedding Model: 4/4 tests passed\n  ✅ Step 16: Batch Embedding Generation: 5/5 tests passed\n  ✅ DI: Processing Services Integration: 4/4 tests passed",
      "startPosition": 1960,
      "endPosition": 4408,
      "tokenCount": 471,
      "chunkIndex": 1,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "\n\n### ✅ Phase 4: Search\n- **Tests:** 20/20\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready for search tests\n  ✅ FAISS dependency is installed\n  ✅ Vector index can be built from embeddings\n  ✅ Creates FAISS index file (binary format)\n  ✅ Creates ID mappings file\n  ✅ Vector index has correct dimensions (768)\n  ✅ Search functionality exists in CLI\n  ✅ Search returns relevant results\n  ✅ Search includes similarity scores\n  ✅ Search retrieves chunk metadata\n  ✅ Search handles empty index gracefully\n  ✅ Search command works with folder and query\n  ✅ Supports configurable results with -k parameter\n  ✅ Displays source file and location\n  ✅ Shows content snippets with similarity scores\n  ✅ Works without starting server\n  ✅ Handles unindexed folders with helpful guidance\n  ✅ Step 17: FAISS Vector Index: 5/5 tests passed\n  ✅ Step 18: Similarity Search Function: 5/5 tests passed\n  ✅ Step 19: Search CLI Command: 6/6 tests passed\n\n### ✅ Phase 5: MCP\n- **Tests:** 36/36\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test data indexed successfully\n  ✅ Test environment ready for MCP tests\n  ✅ MCP SDK dependency is installed\n  ✅ MCP server module exists\n  ✅ Serve command exists in CLI\n  ✅ Server starts without immediate errors\n  ✅ Server implements MCP protocol basics\n  ✅ Server supports graceful shutdown\n  ✅ search_knowledge tool is defined in server\n  ✅ Tool accepts required parameters (query, top_k, threshold)\n  ✅ Tool has proper input schema validation\n  ✅ Search handler method is implemented\n  ✅ Tool integrates with embedding and vector systems\n  ✅ Response format includes content and metadata\n  ✅ Tool includes source attribution\n  ✅ Error handling for unindexed folders\n  ✅ Lazy initialization for performance\n  ✅ Enhanced search tool is also available (Step 22 progress)\n  ✅ search_knowledge_enhanced tool is defined in server\n  ✅ Enhanced search module exists\n  ✅ EnhancedVectorSearch class is implemented\n  ✅ Previous/next chunk context retrieval is implemented\n  ✅ Paragraph boundary expansion is implemented\n  ✅ Document structure extraction is implemented\n  ✅ Result grouping by document is implemented\n  ✅ Overlap deduplication is implemented\n  ✅ Enhanced search tool accepts context parameters\n  ✅ Enhanced search integrates with vector index\n  ✅ Document type detection supports multiple formats\n  ✅ Enhanced results include structured metadata\n  ✅ Context expansion preserves content boundaries\n  ✅ Document structure supports multiple types\n  ✅ Enhanced search returns grouped results format\n  ✅ Step 20: MCP Server Scaffold: 6/6 tests passed\n  ✅ Step 21: Search Tool Implementation: 10/10 tests passed\n  ✅ Step 22: Context Enhancement: 15/15 tests passed",
      "startPosition": 4408,
      "endPosition": 7147,
      "tokenCount": 523,
      "chunkIndex": 2,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "\n\n### ✅ Phase 6: Real-time\n- **Tests:** 39/39\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready\n  ✅ File watcher detects new files: PASSED\n  ✅ File watcher detects file modifications: PASSED\n  ✅ File watcher detects file deletions: PASSED\n  ✅ File watcher logs update events: PASSED\n  ✅ File watcher debounces rapid changes (1-second delay): PASSED\n  ✅ CLI watch command exists and accepts options: PASSED\n  ✅ File watcher supports graceful shutdown: PASSED\n  ✅ Configuration file (.folder-mcp.yaml) support: PASSED\n  ✅ Configuration schema validation: PASSED\n  ✅ CLI arguments override config file: PASSED\n  ✅ Local config takes priority over global config: PASSED\n  ✅ Configuration validation works correctly: PASSED\n  ✅ Global config provides defaults: PASSED\n  ✅ DI-enabled watcher module can be imported\n  ✅ CLI watch command supports --use-di flag\n  ✅ DI-enabled watcher can be instantiated\n  ✅ Status: PASSED\n  ✅ File watcher detects new files\n  ✅ File watcher detects file modifications\n  ✅ File watcher detects file deletions\n  ✅ File watcher logs update events\n  ✅ File watcher debounces rapid changes (1-second delay)\n  ✅ CLI watch command exists and accepts options\n  ✅ File watcher supports graceful shutdown\n  ✅ Status: COMPLETED\n  ✅ Configuration file (.folder-mcp.yaml) support\n  ✅ Configuration schema validation\n  ✅ CLI arguments override config file\n  ✅ Local config takes priority over global config\n  ✅ Configuration validation works correctly\n  ✅ Global config provides defaults\n  ✅ Status: COMPLETED\n  ✅ DI-enabled watcher module can be imported\n  ✅ CLI watch command supports --use-di flag\n  ✅ DI-enabled watcher can be instantiated\n  ✅ 🎯 Step 23 (File Watcher): COMPLETED\n  ✅ 🎯 Step 24 (Configuration): COMPLETED\n  ✅ 🎯 DI Watcher Integration: COMPLETED\n\n### ✅ Phase 7: Production\n- **Tests:** 13/13\n- **Success Rate:** 100%\n- **Status:** PASSED\n- **Details:**\n  ✅ Created test environment with 5 test files\n  ✅ Error recovery system imports correctly\n  ✅ Error recovery system builds without errors\n  ✅ Continues indexing after single file failure\n  ✅ Creates error log file in correct location\n  ✅ Error log contains JSON-formatted entries\n  ✅ Shows clear error summaries with statistics\n  ✅ Implements retry logic with exponential backoff\n  ✅ Cache operations use atomic file writes\n  ✅ Never leaves cache in corrupted state\n  ✅ Progress resumption works for interrupted operations\n  ✅ Error recovery integrates with all major operations\n  ✅ STEP25: 11/11 tests passed (100.0%)",
      "startPosition": 7147,
      "endPosition": 9692,
      "tokenCount": 479,
      "chunkIndex": 3,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "\n\n### ✅ Phase 8: UX & Configuration\n- **Tests:** 41/42\n- **Success Rate:** 98%\n- **Status:** PASSED\n- **Details:**\n  ✅ Test environment ready\n  ✅ Test: Runtime configuration interface is complete\n  ✅ Test: Default runtime configuration has sensible values\n  ✅ Test: Runtime configuration generation works\n  ✅ Test: Runtime configuration validation works\n  ✅ Test: Runtime configuration caching works\n  ✅ Test: System capabilities detection works\n  ✅ Test: Configuration optimization works\n  ✅ Test: Basic cache write/read passed\n  ✅ Test: Cache expiry works passed\n  ✅ Test: Cache key validity check passed\n  ✅ Test: Cache metadata retrieval passed\n  ✅ Test: Cache statistics passed\n  ✅ Test: Runtime configuration caching passed\n  ✅ Test: System profile caching passed\n  ✅ Found 3 models in Ollama\n  ✅ Found 3 models in Ollama\n  ✅ Cached 3 embedding models from 3 total\n  ✅ Test: Ollama models caching (if available) passed\n  ✅ Test: Cache invalidation passed\n  ✅ Test: Corrupted cache handling passed\n  ✅ Test: Cache files in global directory passed\n  ✅ Test: Cache TTL and expiration handling passed\n  ✅ Test: Cache data structure validation passed\n  ✅ Step 27: Configuration Caching System - All tests passed!\n  ✅ Test: Path validation - valid folder passed\n  ✅ Test: Path validation - non-existent folder passed\n  ✅ Test: Path validation - include/exclude paths passed\n  ✅ Test: Numeric validation - valid values passed\n  ✅ Test: Numeric validation - invalid chunk size passed\n  ✅ Test: Numeric validation - defaults passed\n  ✅ Test: Network validation - valid port passed\n  ✅ Test: Network validation - invalid port passed\n  ✅ Test: Network validation - host config passed\n  ✅ Test: Model validation - valid model passed\n  ✅ Test: Model validation - non-existent model passed\n  ✅ Test: Validation summary - error case passed\n  ✅ Test: Validation summary - success case passed\n  ✅ Step 28 tests completed successfully\n  ✅ Test: System detection integration works\n  ✅ Passed: 10\n  ❌ Failed: 0\n\n## Test Descriptions\n\n### Phase 1: Foundation\nTests core functionality including CLI interface, caching system, and file fingerprinting.\n\n### Phase 2: Parsing\nTests document parsing capabilities for text files, PDFs, and Office documents.\n\n### Phase 3: Processing\nTests text processing including chunking algorithms and embedding generation.\n\n### Phase 4: Search\nTests vector search functionality and FAISS integration.\n\n### Phase 5: MCP\nTests Model Context Protocol server implementation and integration.\n\n## MCP Server Tests",
      "startPosition": 9692,
      "endPosition": 12216,
      "tokenCount": 489,
      "chunkIndex": 4,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "### Phase 4: Search\nTests vector search functionality and FAISS integration.\n\n### Phase 5: MCP\nTests Model Context Protocol server implementation and integration.\n\n## MCP Server Tests\n\n### Unit Tests\n- `tests/unit/interfaces/mcp/server.test.ts`\n  - Tool discovery and registration\n  - Tool call handling and delegation\n  - Error handling that doesn't break Claude Desktop\n  - Integration with dependency injection\n\n### Integration Tests\n- `tests/integration/mcp/claude-integration.test.ts`\n  - End-to-end integration with Claude Desktop\n  - Tool discovery and registration\n  - Tool execution through Claude Desktop\n  - Error handling and recovery\n\n### Performance Tests\n- `tests/performance/mcp/performance.test.ts`\n  - Response time for tool discovery (< 100ms)\n  - Response time for tool calls (< 50ms for simple tools)\n  - File operation performance (< 100ms for small files, < 500ms for large files)\n  - Concurrent request handling (10 concurrent calls < 1s)\n  - Sequential request handling (10 sequential calls < 500ms)\n\n### Test Helper\n- `tests/helpers/mcp-test-helper.ts`\n  - JSON-RPC request/response handling\n  - Process management\n  - Test data setup and cleanup\n  - Common test utilities\n\n## Test Coverage\n\n### Core Functionality\n- ✅ Tool discovery and registration\n- ✅ Basic tool execution (get_status)\n- ✅ File operations (read_file, list_files, search_files)\n- ✅ System operations (get_folder_stats, get_system_health)\n- ✅ Knowledge operations (semantic_search, get_related_content)\n\n### Error Handling\n- ✅ Unknown tool errors\n- ✅ File not found errors\n- ✅ Invalid argument errors\n- ✅ Server startup/shutdown errors\n\n### Performance\n- ✅ Response time benchmarks\n- ✅ Concurrent request handling\n- ✅ Sequential request handling\n- ✅ Large file handling\n\n### Integration\n- ✅ Claude Desktop protocol compliance\n- ✅ JSON-RPC message format\n- ✅ Error response format\n- ✅ Process management\n\n## Test Requirements\n\n### Unit Tests\n- Must test all public interfaces\n- Must mock external dependencies\n- Must verify error handling\n- Must test edge cases\n\n### Integration Tests\n- Must test end-to-end functionality\n- Must verify Claude Desktop integration\n- Must test error recovery\n- Must verify process management\n\n### Performance Tests\n- Must meet response time requirements\n- Must handle concurrent requests\n- Must handle large files\n- Must maintain stability under load\n\n## Running Tests\n\n```bash\n# Run all tests\nnpm test\n\n# Run unit tests only\nnpm run test:unit\n\n# Run integration tests only\nnpm run test:integration\n\n# Run performance tests only\nnpm run test:performance",
      "startPosition": 12033,
      "endPosition": 14610,
      "tokenCount": 489,
      "chunkIndex": 5,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    },
    {
      "content": "\n\n# Run tests with coverage\nnpm run test:coverage\n```\n\n## Test Environment\n\n- Node.js v18 or later\n- Windows 10/11\n- PowerShell\n- Claude Desktop\n\n## Test Data\n\nTest data is managed by the `MCPServerTestHelper` class:\n- Creates test folders and files\n- Manages test process lifecycle\n- Handles cleanup after tests\n- Provides common test utilities\n\n## Continuous Integration\n\nTests are run automatically:\n- On every pull request\n- On every push to main\n- Before deployment\n- After dependency updates\n\n## Test Maintenance\n\n- Keep test data up to date\n- Update performance benchmarks as needed\n- Add tests for new features\n- Remove tests for deprecated features\n- Maintain test documentation\n\n---\n*This summary was automatically generated by run-all-tests.js*",
      "startPosition": 14610,
      "endPosition": 15365,
      "tokenCount": 159,
      "chunkIndex": 6,
      "metadata": {
        "sourceFile": "tests\\TEST-SUMMARY.md",
        "sourceType": "md",
        "totalChunks": 7,
        "hasOverlap": true,
        "originalMetadata": {
          "type": "md",
          "originalPath": "tests\\TEST-SUMMARY.md",
          "size": 15900,
          "lastModified": "2025-06-16T23:32:54.785Z",
          "lines": 450,
          "encoding": "utf-8"
        }
      }
    }
  ],
  "processedAt": "2025-06-18T20:41:34.811Z"
}