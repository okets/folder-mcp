syntax = "proto3";

package folder_mcp;

// =====================================================================
// Enumeration Types
// =====================================================================

// Document file type enumeration
enum DocumentType {
  DOCUMENT_TYPE_UNSPECIFIED = 0;
  DOCUMENT_TYPE_PDF = 1;
  DOCUMENT_TYPE_DOCX = 2;
  DOCUMENT_TYPE_DOC = 3;
  DOCUMENT_TYPE_XLSX = 4;
  DOCUMENT_TYPE_XLS = 5;
  DOCUMENT_TYPE_PPTX = 6;
  DOCUMENT_TYPE_PPT = 7;
  DOCUMENT_TYPE_TXT = 8;
  DOCUMENT_TYPE_MD = 9;
  DOCUMENT_TYPE_CSV = 10;
  DOCUMENT_TYPE_RTF = 11;
  DOCUMENT_TYPE_ODT = 12;
  DOCUMENT_TYPE_ODS = 13;
  DOCUMENT_TYPE_ODP = 14;
  DOCUMENT_TYPE_HTML = 15;
  DOCUMENT_TYPE_XML = 16;
}

// Summary generation mode enumeration
enum SummaryMode {
  SUMMARY_MODE_UNSPECIFIED = 0;
  SUMMARY_MODE_BRIEF = 1;       // ≤200 tokens, key points only
  SUMMARY_MODE_DETAILED = 2;    // ≤500 tokens, comprehensive overview
  SUMMARY_MODE_EXECUTIVE = 3;   // ≤300 tokens, business-focused
  SUMMARY_MODE_TECHNICAL = 4;   // ≤500 tokens, technical details
}

// Document processing status enumeration
enum IngestStatus {
  INGEST_STATUS_UNSPECIFIED = 0;
  INGEST_STATUS_PENDING = 1;      // Waiting in queue
  INGEST_STATUS_PROCESSING = 2;   // Currently being processed
  INGEST_STATUS_COMPLETED = 3;    // Successfully processed
  INGEST_STATUS_FAILED = 4;       // Processing failed
  INGEST_STATUS_CANCELLED = 5;    // Processing cancelled
  INGEST_STATUS_RETRY = 6;        // Scheduled for retry
}

// Processing priority enumeration
enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_NORMAL = 2;
  PRIORITY_HIGH = 3;
  PRIORITY_URGENT = 4;
}

// Standard error codes for gRPC responses
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_NOT_FOUND = 1;
  ERROR_CODE_PERMISSION_DENIED = 2;
  ERROR_CODE_INVALID_REQUEST = 3;
  ERROR_CODE_RESOURCE_EXHAUSTED = 4;
  ERROR_CODE_INTERNAL_ERROR = 5;
  ERROR_CODE_UNAVAILABLE = 6;
  ERROR_CODE_TIMEOUT = 7;
  ERROR_CODE_ALREADY_EXISTS = 8;
  ERROR_CODE_PRECONDITION_FAILED = 9;
  ERROR_CODE_OUT_OF_RANGE = 10;
}

// Data type enumeration for table cells
enum CellDataType {
  CELL_DATA_TYPE_UNSPECIFIED = 0;
  CELL_DATA_TYPE_TEXT = 1;
  CELL_DATA_TYPE_NUMBER = 2;
  CELL_DATA_TYPE_DATE = 3;
  CELL_DATA_TYPE_BOOLEAN = 4;
  CELL_DATA_TYPE_FORMULA = 5;
  CELL_DATA_TYPE_ERROR = 6;
}

// =====================================================================
// Folder MCP Service Definition
// =====================================================================
// Complete gRPC service definition for document intelligence endpoints
// Supports local Unix Domain Socket and remote TCP transport with auth
// Token limits: ≤1,000 tokens per response, ≤500 per summary, ≤2,000 batch

service FolderMCP {
  // ===================================================================
  // Core Search Endpoints
  // ===================================================================
  
  // Semantic document discovery with metadata filters
  // Returns top_k documents (max 50) with similarity scores
  rpc SearchDocs(SearchDocsRequest) returns (SearchDocsResponse);
  
  // Chunk-level search with text previews and metadata
  // Returns top_k chunks (max 50) with content previews ≤1,000 tokens
  rpc SearchChunks(SearchChunksRequest) returns (SearchChunksResponse);
  
  // ===================================================================
  // Navigation Endpoints
  // ===================================================================
  
  // Top-level folder tree structure with pagination
  // Returns folder hierarchy with document counts
  rpc ListFolders(ListFoldersRequest) returns (ListFoldersResponse);
  
  // Paginated document listing within a folder
  // Returns documents with metadata, max 200 per page
  rpc ListDocumentsInFolder(ListDocumentsInFolderRequest) returns (ListDocumentsInFolderResponse);
  
  // ===================================================================
  // Document Access Endpoints
  // ===================================================================
  
  // Structural metadata for documents (sheets, slides, authors)
  // Returns document structure without content
  rpc GetDocMetadata(GetDocMetadataRequest) returns (GetDocMetadataResponse);
  
  // Binary document streaming for downloads
  // Streams document content with proper content-type headers
  rpc DownloadDoc(DownloadDocRequest) returns (stream DownloadDocResponse);
  
  // Full chunk text retrieval with metadata
  // Returns chunk content with ≤1,000 tokens per chunk
  rpc GetChunks(GetChunksRequest) returns (GetChunksResponse);
  
  // ===================================================================
  // Summarization Endpoints
  // ===================================================================
  
  // Single document summarization (brief/detailed modes)
  // Returns summary ≤500 tokens with source range references
  rpc GetDocSummary(GetDocSummaryRequest) returns (GetDocSummaryResponse);
  
  // Multi-document batch processing with total token cap
  // Returns batch summaries with ≤2,000 total tokens
  rpc BatchDocSummary(BatchDocSummaryRequest) returns (BatchDocSummaryResponse);
  
  // ===================================================================
  // Specialized Query Endpoints
  // ===================================================================
  
  // Semantic queries over spreadsheet data with sheet selection
  // Returns cell ranges and values matching query
  rpc TableQuery(TableQueryRequest) returns (TableQueryResponse);
  
  // Document processing status monitoring
  // Returns ingestion progress and job tracking
  rpc IngestStatus(IngestStatusRequest) returns (IngestStatusResponse);
  
  // Trigger document re-processing with job tracking
  // Initiates refresh operation and returns job ID
  rpc RefreshDoc(RefreshDocRequest) returns (RefreshDocResponse);
  
  // Raw vector access for debugging and advanced queries
  // Returns embedding vectors for specified documents/chunks
  rpc GetEmbedding(GetEmbeddingRequest) returns (GetEmbeddingResponse);
}

// =====================================================================
// Core Search Messages
// =====================================================================

message SearchDocsRequest {
  string query = 1;                    // Semantic search query (required, 1-1000 chars)
  int32 top_k = 2;                     // Max results (1-50, defaults to 10)
  repeated DocumentType document_types = 3;   // Filter by document types (max 20 types)
  string date_from = 4;                // RFC3339 timestamp (optional)
  string date_to = 5;                  // RFC3339 timestamp (optional)
  repeated string authors = 6;         // Filter by document authors (max 10 authors)
  map<string, string> metadata_filters = 7; // Key-value metadata filters (max 20 pairs)
}

message SearchDocsResponse {
  repeated DocumentResult documents = 1;
  int32 total_found = 2;
  SimilarityScore max_score = 3;       // Highest similarity score
  string query_id = 4;                 // For debugging/tracing
  ResponseStatus status = 5;           // Response status and errors
  PaginationInfo pagination = 6;       // Pagination information
}

message DocumentResult {
  string document_id = 1;
  string file_path = 2;
  string title = 3;
  SimilarityScore similarity = 4;      // Enhanced similarity information
  DocumentType document_type = 5;      // Use enum instead of string
  int64 file_size = 6;
  string modified_date = 7;            // RFC3339 timestamp
  repeated Author authors = 8;         // Enhanced author information
  string snippet = 9;                  // Brief content preview
  Metadata metadata = 10;              // Enhanced metadata container
}

message SearchChunksRequest {
  string query = 1;                    // Semantic search query (required, 1-1000 chars)
  int32 top_k = 2;                     // Max results (1-50, defaults to 10)
  repeated string document_ids = 3;     // Restrict to specific documents (max 100 docs)
  int32 max_preview_tokens = 4;        // Preview length (1-1000, defaults to 200)
  bool include_context = 5;            // Include surrounding chunks
}

message SearchChunksResponse {
  repeated ChunkResult chunks = 1;
  int32 total_found = 2;
  SimilarityScore max_score = 3;       // Highest similarity score
  string query_id = 4;
  ResponseStatus status = 5;           // Response status and errors
  PaginationInfo pagination = 6;       // Pagination information
}

message ChunkResult {
  string chunk_id = 1;
  string document_id = 2;
  string file_path = 3;
  SimilarityScore similarity = 4;      // Enhanced similarity information
  string content_preview = 5;          // ≤1,000 tokens
  int32 chunk_index = 6;
  int32 start_offset = 7;
  int32 end_offset = 8;
  repeated ChunkResult context_chunks = 9; // Surrounding chunks if requested
  Metadata metadata = 10;              // Enhanced metadata container
}

// =====================================================================
// Navigation Messages
// =====================================================================

message ListFoldersRequest {
  string base_path = 1;                // Starting folder path (required, max 500 chars)
  int32 max_depth = 2;                 // Tree traversal depth (1-10, defaults to 3)
  bool include_document_counts = 3;    // Include file counts per folder
}

message ListFoldersResponse {
  repeated FolderInfo folders = 1;
  int32 total_folders = 2;
  ResponseStatus status = 3;           // Response status and errors
  PaginationInfo pagination = 4;       // Pagination information
}

message FolderInfo {
  string folder_path = 1;
  string folder_name = 2;
  int32 document_count = 3;
  int64 total_size = 4;
  string last_modified = 5;            // RFC3339 timestamp
  repeated FolderInfo subfolders = 6;
}

message ListDocumentsInFolderRequest {
  string folder_path = 1;              // Folder path (required, max 500 chars)
  int32 page = 2;                      // Page number (≥1, defaults to 1)
  int32 per_page = 3;                  // Items per page (1-200, defaults to 50)
  string sort_by = 4;                  // "name", "modified", "size", "type"
  string sort_order = 5;               // "asc", "desc" (defaults to "asc")
  repeated DocumentType type_filter = 6;  // Filter by document types (max 20 types)
  string modified_after = 7;           // RFC3339 timestamp (optional)
  string modified_before = 8;          // RFC3339 timestamp (optional)
}

message ListDocumentsInFolderResponse {
  repeated DocumentInfo documents = 1;
  int32 total_documents = 2;
  ResponseStatus status = 3;           // Response status and errors
  PaginationInfo pagination = 4;       // Pagination information
}

message DocumentInfo {
  string document_id = 1;
  string file_path = 2;
  string filename = 3;
  DocumentType document_type = 4;      // Use enum instead of string
  int64 file_size = 5;
  string created_date = 6;             // RFC3339 timestamp
  string modified_date = 7;            // RFC3339 timestamp
  repeated Author authors = 8;         // Enhanced author information
  string title = 9;
  int32 page_count = 10;               // For PDFs, slides
  Metadata metadata = 11;              // Enhanced metadata container
}

// =====================================================================
// Document Access Messages
// =====================================================================

message GetDocMetadataRequest {
  string document_id = 1;
  bool include_structure = 2;          // Include sheets/slides structure
}

message GetDocMetadataResponse {
  DocumentInfo document_info = 1;
  DocumentStructureEnhanced structure = 2; // Enhanced detailed structure
  ResponseStatus status = 3;           // Response status and errors
}

message DocumentStructure {
  repeated SheetInfo sheets = 1;       // For spreadsheets
  repeated SlideInfo slides = 2;       // For presentations
  repeated PageInfo pages = 3;         // For PDFs
  repeated SectionInfo sections = 4;   // For documents
}

message SheetInfo {
  string sheet_name = 1;
  int32 row_count = 2;
  int32 column_count = 3;
  repeated string column_headers = 4;
}

message SlideInfo {
  int32 slide_number = 1;
  string title = 2;
  string layout = 3;
  int32 text_length = 4;
}

message PageInfo {
  int32 page_number = 1;
  int32 text_length = 2;
  bool has_images = 3;
  bool has_tables = 4;
}

message SectionInfo {
  string section_title = 1;
  int32 level = 2;                     // Heading level (1-6)
  int32 start_offset = 3;
  int32 end_offset = 4;
}

message DownloadDocRequest {
  string document_id = 1;
  string format = 2;                   // "original", "pdf", "text"
}

message DownloadDocResponse {
  bytes chunk_data = 1;                // Streamed binary data
  string content_type = 2;
  int64 total_size = 3;
  string filename = 4;
}

message GetChunksRequest {
  string document_id = 1;
  repeated int32 chunk_indices = 2;    // Specific chunks, empty = all
  bool include_metadata = 3;
  int32 max_tokens_per_chunk = 4;      // ≤1,000 per chunk
}

message GetChunksResponse {
  repeated ChunkData chunks = 1;
  string document_id = 2;
  ResponseStatus status = 3;           // Response status and errors
  int32 total_token_count = 4;         // Total tokens across all chunks
}

message ChunkData {
  string chunk_id = 1;
  int32 chunk_index = 2;
  string content = 3;                  // Full text content ≤1,000 tokens
  int32 start_offset = 4;
  int32 end_offset = 5;
  int32 token_count = 6;
  Metadata metadata = 7;               // Enhanced metadata container
}

// =====================================================================
// Summarization Messages
// =====================================================================

message GetDocSummaryRequest {
  string document_id = 1;
  SummaryMode mode = 2;                // Summary generation mode enum
  repeated string focus_areas = 3;     // Specific topics to emphasize
  int32 max_tokens = 4;                // ≤500 tokens
}

message GetDocSummaryResponse {
  string summary = 1;                  // ≤500 tokens
  repeated SourceRange source_ranges = 2;
  SummaryMode mode = 3;                // Mode that was actually used
  int32 token_count = 4;
  float confidence_score = 5;
  ResponseStatus status = 6;           // Response status and errors
}

message SourceRange {
  int32 start_offset = 1;
  int32 end_offset = 2;
  string source_text = 3;              // Supporting evidence
  int32 page_number = 4;               // Page reference if applicable
  string section_title = 5;            // Section reference if applicable
}

message BatchDocSummaryRequest {
  repeated string document_ids = 1;
  SummaryMode mode = 2;                // Summary generation mode enum
  int32 max_total_tokens = 3;          // ≤2,000 total
  bool include_cross_references = 4;   // Link related documents
}

message BatchDocSummaryResponse {
  repeated DocumentSummary summaries = 1;
  int32 total_tokens = 2;              // ≤2,000
  repeated CrossReference cross_references = 3;
  ResponseStatus status = 4;           // Response status and errors
  ProcessingStats processing_stats = 5; // Batch processing statistics
}

message DocumentSummary {
  string document_id = 1;
  string summary = 2;
  int32 token_count = 3;
  repeated SourceRange source_ranges = 4;
}

message CrossReference {
  string source_document_id = 1;
  string target_document_id = 2;
  string relationship = 3;             // "references", "similar", "contradicts"
  float confidence = 4;
}

// =====================================================================
// Specialized Query Messages
// =====================================================================

message TableQueryRequest {
  string query = 1;                    // Natural language query
  repeated string document_ids = 2;     // Target spreadsheets
  repeated string sheet_names = 3;     // Specific sheets
  string cell_range = 4;               // "A1:Z100" format
  int32 max_results = 5;               // Max cell matches
}

message TableQueryResponse {
  repeated CellMatch matches = 1;
  repeated TableStructure tables = 2;  // Relevant table structures
  string query_interpretation = 3;     // How query was processed
  ResponseStatus status = 4;           // Response status and errors
  PaginationInfo pagination = 5;       // Pagination for large result sets
}

message CellMatch {
  string document_id = 1;
  string sheet_name = 2;
  Cell cell = 3;                       // Enhanced cell information
  float relevance_score = 4;
  string context = 5;                  // Surrounding context
}

message TableStructure {
  string document_id = 1;
  string sheet_name = 2;
  repeated string headers = 3;
  int32 row_count = 4;
  int32 column_count = 5;
}

message IngestStatusRequest {
  repeated string document_ids = 1;     // Specific documents, empty = all
  bool include_error_details = 2;
}

message IngestStatusResponse {
  repeated DocumentStatus documents = 1;
  OverallStatus overall = 2;
  ResponseStatus status = 3;           // Response status and errors
}

message DocumentStatus {
  string document_id = 1;
  string file_path = 2;
  IngestStatus status = 3;             // Processing status enum
  Progress progress = 4;               // Enhanced progress information
  string last_updated = 5;             // RFC3339 timestamp
  repeated ErrorDetail errors = 6;     // Detailed error information
  ProcessingStats stats = 7;
}

message ProcessingStats {
  int32 chunks_created = 1;
  int32 embeddings_generated = 2;
  int64 processing_time_ms = 3;
}

message OverallStatus {
  int32 total_documents = 1;
  int32 completed_documents = 2;
  int32 pending_documents = 3;
  int32 error_documents = 4;
  float overall_progress = 5;          // 0.0-100.0
}

message RefreshDocRequest {
  repeated string document_ids = 1;
  bool force_reprocess = 2;            // Ignore cache
  Priority priority = 3;               // Processing priority enum
}

message RefreshDocResponse {
  string job_id = 1;                   // For tracking progress
  repeated string queued_document_ids = 2;
  string estimated_completion = 3;     // RFC3339 timestamp
}

message GetEmbeddingRequest {
  repeated string document_ids = 1;    // Empty = error
  repeated string chunk_ids = 2;       // Empty = all chunks for documents
  string format = 3;                   // "raw", "normalized"
}

message GetEmbeddingResponse {
  repeated EmbeddingVector vectors = 1;
  int32 vector_dimension = 2;
  string model_name = 3;
  string model_version = 4;            // Model version information
  ResponseStatus status = 5;           // Response status and errors
}

message EmbeddingVector {
  string id = 1;                       // Document or chunk ID
  Embedding embedding = 2;             // Enhanced embedding information
  string source_type = 3;              // "document" or "chunk"
}

// =====================================================================
// Common Data Types (Phase B1 - Common Data Types)
// =====================================================================

// Pagination message type for consistent paging across services
message PaginationInfo {
  int32 page = 1;                      // Current page number (1-based)
  int32 per_page = 2;                  // Items per page (max 200)
  int32 total_count = 3;               // Total items available
  int32 total_pages = 4;               // Total pages available
  bool has_next = 5;                   // True if more pages exist
  bool has_previous = 6;               // True if previous pages exist
}

// Generic metadata container for flexible key-value pairs
message Metadata {
  map<string, string> string_values = 1;   // String metadata
  map<string, int64> int_values = 2;       // Integer metadata
  map<string, double> float_values = 3;    // Float metadata
  map<string, bool> bool_values = 4;       // Boolean metadata
  map<string, bytes> binary_values = 5;    // Binary metadata
}

// Progress tracking for long-running operations
message Progress {
  int32 completed = 1;                 // Completed items
  int32 total = 2;                     // Total items to process
  float percentage = 3;                // Progress percentage (0.0-100.0)
  string eta = 4;                      // Estimated completion time (RFC3339)
  string current_item = 5;             // Currently processing item
}

// =====================================================================
// Specialized Data Types (Phase B2 - Specialized Data Types)
// =====================================================================

// Similarity score with confidence and ranking information
message SimilarityScore {
  float score = 1;                     // Similarity score (0.0-1.0)
  float confidence = 2;                // Confidence in score (0.0-1.0)
  int32 rank = 3;                      // Ranking position in results
  string method = 4;                   // Similarity calculation method
}

// Date range with timezone and precision support
message DateRange {
  string from = 1;                     // Start date (RFC3339)
  string to = 2;                       // End date (RFC3339)
  string timezone = 3;                 // Timezone identifier
  string precision = 4;                // "day", "hour", "minute", "second"
}

// Author information with contact details and roles
message Author {
  string name = 1;                     // Full name
  string email = 2;                    // Email address
  string role = 3;                     // Author role or title
  string last_modified = 4;            // Last modification by this author (RFC3339)
  map<string, string> attributes = 5;  // Additional author attributes
}

// Enhanced document structure with nested sections
message DocumentStructureEnhanced {
  repeated SheetInfo sheets = 1;       // For spreadsheets
  repeated SlideInfo slides = 2;       // For presentations
  repeated PageInfo pages = 3;         // For PDFs
  repeated SectionInfo sections = 4;   // For documents
  repeated TableOfContentsEntry toc = 5; // Table of contents
  repeated string tags = 6;            // Document tags
  map<string, string> properties = 7;  // Document properties
}

// Table of contents entry
message TableOfContentsEntry {
  string title = 1;                    // Section title
  int32 level = 2;                     // Nesting level (1-6)
  int32 page_number = 3;               // Page number reference
  string anchor = 4;                   // Internal anchor/bookmark
}

// Enhanced cell information for spreadsheet queries
message Cell {
  int32 row = 1;                       // Row number (1-based)
  int32 column = 2;                    // Column number (1-based)
  string address = 3;                  // Cell address ("A1" format)
  string value = 4;                    // Cell display value
  string raw_value = 5;                // Raw cell value
  CellDataType type = 6;               // Cell data type enum
  string formula = 7;                  // Formula if applicable
  map<string, string> formatting = 8;  // Cell formatting properties
}

// Embedding vector with comprehensive metadata
message Embedding {
  repeated float vector = 1;           // Vector components
  int32 dimensions = 2;                // Vector dimensionality
  string model_name = 3;               // Model used for generation
  string model_version = 4;            // Model version
  float norm = 5;                      // Vector norm
  map<string, string> metadata = 6;    // Additional embedding metadata
}

// =====================================================================
// Enhanced Error and Status Messages (Phase C - Validation & Documentation)
// =====================================================================

// Comprehensive error detail with validation information
message ErrorDetail {
  ErrorCode code = 1;                  // Standardized error code enum
  string message = 2;                  // Human-readable error message
  string field = 3;                    // Field that caused the error
  repeated string suggestions = 4;     // Possible fixes or next steps
  map<string, string> context = 5;     // Additional error context
  string documentation_url = 6;        // Link to relevant documentation
}

// Response status wrapper for all operations
message ResponseStatus {
  bool success = 1;                    // Operation success indicator
  repeated ErrorDetail errors = 2;     // List of errors if any
  repeated string warnings = 3;        // Non-fatal warnings
  string request_id = 4;               // Unique request identifier
  int64 processing_time_ms = 5;        // Processing time in milliseconds
}

// System health and status information
message StatusInfo {
  bool healthy = 1;                    // Overall system health
  string version = 2;                  // Service version
  int64 uptime_seconds = 3;            // Service uptime
  int32 active_connections = 4;        // Current active connections
  string build_info = 5;               // Build information
  map<string, string> components = 6;  // Component health status
  repeated string capabilities = 7;     // Supported capabilities
}
